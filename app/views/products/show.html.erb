<body>


<!-- Stars layers-->
  <div class="stars-layer-1"></div>
  <div class="stars-layer-2"></div>
<!-- End of Stars layers-->

<!-- My-title-->
  <div class="my_title">Women who code write their future</div>
<!-- End of My-title-->

<!-- Rotating container-->
<div class="rotating-container">
<!-- Container-card-01-->
    <div class="container-card-01">
      <!-- Card 01-->
      <div class="spin-card-01-01">
        <div class="front">
          <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230807/img-flo-blue-front_cpb9qm.png" alt="Front Image" />
        </div>
        <div class="back">
          <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230807/img-flo-blue-back_dnbqdb.png" alt="Back Image" />
        </div>
      </div>
      <!-- End of Card 01-->

      <!-- Card 02-->
      <div class="spin-card-01-02">
        <div class="front">
          <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230818/img-coral-front_vfkatj.png" alt="Front Image" />
        </div>
        <div class="back">
          <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230817/img-coral-back_u5qvfo.png" alt="Back Image" />
        </div>
      </div>
      <!-- End of Card 02-->

    </div>
<!-- End of Container-card-01-->

<!-- Container-card-02-->
    <div class="container-card-02">
      <!-- Card 01-->
      <div class="spin-card-02-01">
        <div class="front">
          <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230835/img-crison-front_rbmr47.png" alt="Front Image" />
        </div>
        <div class="back">
          <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230834/img-crimson-back_eisdmw.png" alt="Back Image" />
        </div>
      </div>
      <!-- End of Card 01-->

      <!-- Card 02-->
      <div class="spin-card-02-02">
        <div class="front">
          <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230826/img-violet-front_snmo4v.png" alt="Front Image" />
        </div>
        <div class="back">
          <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230826/img-violet-back_jupm5k.png" alt="Back Image" />
        </div>
      </div>
      <!-- End of Card 02-->
    </div>
<!-- End of container-card-02-->
<!-- End of Rotating container-->
  </div>

<!-- Mobile only-->
<div class="mobile-only">
    <div class="spin-card-01-01">
      <div class="front">
        <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230807/img-flo-blue-front_cpb9qm.png" alt="Front Image" />
      </div>
      <div class="back">
        <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230807/img-flo-blue-back_dnbqdb.png" alt="Back Image" />
      </div>
    </div>

    <div class="spin-card-01-02">
      <div class="front">
        <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230818/img-coral-front_vfkatj.png" alt="Front Image" />
      </div>
      <div class="back">
        <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735230817/img-coral-back_u5qvfo.png" alt="Back Image" />
      </div>
    </div>
</div>

<!-- Mobile only End-->


<!-- Product card-->

<div class="card">

  <div class="bloc-01">
    <img
      id="main-product-image"
      src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1734458159/sweater_blue_anl1zo.jpg"
      alt="<%= @product.name %>"
    >
  </div>

  <div class="bloc-02">
    <h1><%= @product.name %></h1>
    <p class="product-description"><%= @product.description.html_safe %></p>

    <div class="squiggly-svg">
      <svg viewBox="0 0 100 15" preserveAspectRatio="none" width="100%" height="100%">
        <path
          d="M0 7 Q 10 2 20 7 T 40 7 T 60 7 T 80 7 T 100 7"
          stroke="#FFB9B4"
          stroke-width="2"
          fill="none"
        />
      </svg>
    </div>

    <div class="price"><%= format_price(@product.base_price) %></div>

    <div class="squiggly-svg">
      <svg viewBox="0 0 100 15" preserveAspectRatio="none" width="100%" height="100%">
        <path
          d="M0 7 Q 10 2 20 7 T 40 7 T 60 7 T 80 7 T 100 7"
          stroke="#FFB9B4"
          stroke-width="2"
          fill="none"
        />
      </svg>
    </div>



    <p class="product-description">Colors</p>
<div class="swatches">
  <button
    data-color-id="<%= Color.find_by(name: 'Blue')&.id %>"
    data-image-url="https://res.cloudinary.com/diwuyv3c8/image/upload/v1734458159/sweater_blue_anl1zo.jpg"
    class="color-select selected">
    <%= image_tag "swatch-blue.svg", alt: "Flo Blue" %>
  </button>

  <button
    data-color-id="<%= Color.find_by(name: 'Purple')&.id %>"
    data-image-url="https://res.cloudinary.com/diwuyv3c8/image/upload/v1734458160/sweater_purple_zixn0s.jpg"
    class="color-select">
    <%= image_tag "swatch-purple.svg", alt: "Violet" %>
  </button>

  <button
    data-color-id="<%= Color.find_by(name: 'Coral')&.id %>"
    data-image-url="https://res.cloudinary.com/diwuyv3c8/image/upload/v1734458159/sweater_coral_dsso00.jpg"
    class="color-select">
    <%= image_tag "swatch-coral.svg", alt: "Watermelon" %>
  </button>

  <button
    data-color-id="<%= Color.find_by(name: 'Crimson')&.id %>"
    data-image-url="https://res.cloudinary.com/diwuyv3c8/image/upload/v1734458159/sweater_crimson_kplpcr.jpg"
    class="color-select">
    <%= image_tag "swatch-crimson.svg", alt: "Crimson" %>
  </button>
</div>

    <p class="product-description">Select size</p>
    <div class="sizes">
      <% @sizes.each do |size| %>
        <button
          data-size-id="<%= size.id %>"
          class="size-button">
          <%= size.name %>
        </button>
      <% end %>
    </div>

    <div class="add-to-cart">
      <%= form_tag new_order_path, method: :get do %>
        <%= hidden_field_tag :variant_id, "", id: "selected_variant_id" %>
        <%= button_tag "Add to Cart",
            class: "button",
            disabled: true,
            id: "add_to_cart_button" %>
      <% end %>
    </div> <!-- Closing the add-to-cart div -->
  </div> <!-- Closing bloc-02 -->
</div><!-- Closing Main Card -->


<!-- Footer -->

<footer>

    <div class="footer-item">
    <a href="google.com">Terms & Conditions</a>
    <a href="google.com">Privacy Policy</a>
    </div>

    <div class="footer-item">
      <a href="google.com">Refund and Return Policy</a>
      <a href="google.com">Shipping Policy</a>
    </div>

    <div class="footer-item">
    <a href="google.com">Disclaimer of Liability</a>
    <a href="google.com">Intellectual Property Notice</a>
    </div>

    <div class="footer-item">
      <a href="google.com">Contact us</a>
    </div>

</footer>

</body>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize state variables
  let selectedColor = null;
  let selectedSize = null;
  const addToCartButton = document.getElementById('add_to_cart_button');
  const variantIdField = document.getElementById('selected_variant_id');
  const mainImage = document.getElementById('main-product-image');

  // Mapping of variant IDs to Printify image URLs (commented out for reference)
  const productImages = {
    // Flo Blue variants
    //'58': 'https://images.printify.com/mockup/67618fb75d0f6a015c058749/96869/99007/193e573fc60.jpg',
    // Add other variants as needed
  };

  // Color selection event handlers
  document.querySelectorAll('.color-select').forEach(button => {
    button.addEventListener('click', function(e) {
      // Prevent default behavior
      e.preventDefault();
      e.stopPropagation();

      // Debug logging for color selection
      console.log('Color button clicked:', {
        colorId: this.dataset.colorId,
        colorName: this.querySelector('img')?.alt,
        imageUrl: this.dataset.imageUrl
      });

      // Update selected color
      selectedColor = this.dataset.colorId;
      const imageUrl = this.dataset.imageUrl;

      // Update main product image if URL exists
      if (imageUrl) {
        mainImage.src = imageUrl;
      }

      // Update UI to show selected color
      document.querySelectorAll('.color-select').forEach(btn => {
        btn.classList.remove('selected');
      });
      this.classList.add('selected');

      // Check variant availability with new color
      checkVariantAvailability();
    });
  });

  // Size selection event handlers
  document.querySelectorAll('.size-button').forEach(button => {
    button.addEventListener('click', function(e) {
      // Debug logging for size selection
      console.log('Size button clicked:', {
        sizeId: this.dataset.sizeId,
        sizeName: this.textContent.trim()
      });

      // Update selected size
      selectedSize = this.dataset.sizeId;

      // Update UI to show selected size
      document.querySelectorAll('.size-button').forEach(btn => {
        btn.classList.remove('selected');
      });
      this.classList.add('selected');

      // Check variant availability with new size
      checkVariantAvailability();
    });
  });

  // Main function to check variant availability
  function checkVariantAvailability() {
    // Exit if either color or size is not selected
    if (!selectedColor || !selectedSize) {
      console.log('Incomplete selection:', {
        colorSelected: Boolean(selectedColor),
        sizeSelected: Boolean(selectedSize)
      });
      disableAddToCart();
      return;
    }

    // Get current selection elements
    const colorButton = document.querySelector(`.color-select[data-color-id="${selectedColor}"]`);
    const sizeButton = document.querySelector(`.size-button[data-size-id="${selectedSize}"]`);

    // Debug logging for current selection
    console.log('Checking variant availability:', {
      color: {
        id: selectedColor,
        name: colorButton?.querySelector('img')?.alt
      },
      size: {
        id: selectedSize,
        name: sizeButton?.textContent?.trim()
      }
    });

    // Construct URL parameters
    const params = new URLSearchParams({
      product_id: <%= @product.id %>,
      color_id: selectedColor,
      size_id: selectedSize
    });

    // Make API request with explicit headers
    fetch(`/product_variants?${params.toString()}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => {
      // Debug logging for response
      console.log('Response received:', {
        status: response.status,
        contentType: response.headers.get('content-type'),
        ok: response.ok
      });

      // Check response status
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Verify content type
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error(`Unexpected content type: ${contentType}`);
      }

      return response.json();
    })
    .then(data => {
      // Debug logging for parsed data
      console.log('Variant data:', data);

      // Handle error response
      if (data.error) {
        console.error('Server returned error:', data.error);
        disableAddToCart();
        return;
      }

      // Handle successful response
      if (data.available) {
        console.log('Variant is available:', {
          id: data.id,
          color: data.color_name,
          size: data.size_name,
          stock: data.stock
        });
        enableAddToCart(data.id);
      } else {
        console.log('Variant is unavailable:', data);
        disableAddToCart();
      }
    })
    .catch(error => {
      // Handle any errors in the process
      console.error('Error checking variant availability:', error);
      disableAddToCart();
    });
  }

  // Helper function to enable add to cart
  function enableAddToCart(variantId) {
    console.log('Enabling add to cart with variant:', variantId);
    addToCartButton.disabled = false;
    variantIdField.value = variantId;
    addToCartButton.classList.remove('disabled');
  }

  // Helper function to disable add to cart
  function disableAddToCart() {
    console.log('Disabling add to cart');
    addToCartButton.disabled = true;
    variantIdField.value = "";
    addToCartButton.classList.add('disabled');
  }

  // Check for pre-selected options on page load
  const preSelectedColor = document.querySelector('.color-select.selected');
  const preSelectedSize = document.querySelector('.size-button.selected');

  if (preSelectedColor) {
    selectedColor = preSelectedColor.dataset.colorId;
  }
  if (preSelectedSize) {
    selectedSize = preSelectedSize.dataset.sizeId;
  }

  // If both color and size are pre-selected, check availability
  if (selectedColor && selectedSize) {
    checkVariantAvailability();
  }
});
</script>

<div class="chat-widget" id="chatWidget">
  <!-- Chat Icon Button -->
  <button id="chatButton" class="chat-button">
    <img src="https://res.cloudinary.com/diwuyv3c8/image/upload/v1735233084/crystal-ball_yf77xh.svg" alt="crystal-ball">
  </button>

  <!-- Chat Window -->
  <div id="chatWindow" class="chat-window hidden">
    <div class="chat-header">
      <h3>What’s in the future for you in tech?</h3>
      <button id="closeChat" class="close-button">
        <i data-feather="x"></i>
      </button>
    </div>

    <div class="chat-messages" id="chatMessages">
      <!-- Messages will appear here -->
    </div>

    <form id="chatForm" class="chat-form">
      <input type="text"
             id="userQuestion"
             placeholder="Just ask me!"
             required>
      <button type="submit">
        <i data-feather="send"></i>
      </button>
    </form>
  </div>
</div>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Feather icons
    feather.replace();

    const chatButton = document.getElementById('chatButton');
    const chatWindow = document.getElementById('chatWindow');
    const closeChat = document.getElementById('closeChat');
    const chatForm = document.getElementById('chatForm');
    const chatMessages = document.getElementById('chatMessages');
    const userInput = document.getElementById('userQuestion');

    // Toggle chat window
    chatButton.addEventListener('click', () => {
      chatWindow.classList.toggle('hidden');
      chatButton.classList.toggle('hidden');
    });

    // Close chat window
    closeChat.addEventListener('click', () => {
      chatWindow.classList.add('hidden');
      chatButton.classList.remove('hidden');
    });

    // Handle form submission
    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const question = userInput.value;
      console.log('Submitting question:', question); // Debug log

      if (!question.trim()) return;

      // Add user message
      addMessage('user', question);
      userInput.value = '';

      try {
        const token = document.querySelector('meta[name="csrf-token"]').content;
        console.log('CSRF Token:', token); // Debug log

        console.log('Sending request to server...'); // Debug log
        const response = await fetch('/bot/ask', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': token,
            'Accept': 'application/json'  // Add this line
          },
          body: JSON.stringify({ question: question })
        });

        console.log('Response status:', response.status); // Debug log

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Server response:', data); // Debug log

        if (data.answer) {
          addMessage('bot', data.answer);
        } else {
          throw new Error('No answer in response');
        }
      } catch (error) {
        console.error('Error details:', error); // Debug log
        addMessage('bot', 'The crystal ball is cloudy. Try again later!');
      }
    });

    function addMessage(sender, message) {
      console.log('Adding message:', { sender, message }); // Debug log
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${sender}-message`;
      messageDiv.textContent = message;
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  });
<% end %>
